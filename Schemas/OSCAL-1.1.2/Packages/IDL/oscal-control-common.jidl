       title: "OSCAL Control Common Types"
     package: "https://example.gov/ns/oscal/0.0.1/control_common/"
     exports: ["Parameter"]
      config: {"$MaxString": 1000, "$TypeName": "^[$A-Z][-.$A-Za-z0-9]{0,96}$", "$FieldName": "^[$a-z][-_$A-Za-z0-9]{0,63}$", "$NSID": "^([A-Za-z][-A-Za-z0-9]{0,31})?$"}

Parameter = Record                                 // Parameters provide a mechanism for the dynamic assignment of value(s) in a control.
   1 id               TokenDatatype                // A unique identifier for the parameter.
   2 class            TokenDatatype optional       // A textual label that provides a characterization of the type, purpose, use or scope of the parameter.
   3 depends-on       TokenDatatype optional       // (deprecated) Another parameter invoking this one. This construct has been deprecated and should not be used.
   4 props            Property [0..*]
   5 links            Link [0..*]
   6 label            String optional              // A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.
   7 usage            String optional              // Describes the purpose and use of a parameter.
   8 constraints      Parameter-constraint [0..*]
   9 guidelines       Parameter-guideline [0..*]
  10 values           Parameter-value [0..*]
  11 select           Parameter-selection optional
  12 remarks          Remarks optional

Parameter-constraint.tests = Record                // A test expression which is expected to be evaluated by a tool.
   1 expression       StringDatatype               // A formal (executable) expression of a constraint.
   2 remarks          Remarks optional

Parameter-constraint.tests-list = ArrayOf(Parameter-constraint.tests){1..*}

Parameter-constraint = Record                      // A formal or informal expression of a constraint or test.
   1 description      String optional              // A textual summary of the constraint to be applied.
   2 tests            Parameter-constraint.tests-list [0..*]

Parameter-guideline = Record                       // A prose statement that provides a recommendation for the use of a parameter.
   1 prose            String                       // Prose permits multiple paragraphs, lists, tables etc.

Parameter-value = Choice(allOf)                    // A parameter value or set of values.
   1  StringDatatype                               // alias::

Parameter-selection.how-many.1 = Enumerated
   1 one
   2 one-or-more

Parameter-selection.how-many = Choice(allOf)       // Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.
   1  TokenDatatype                                // c1::
   2  Parameter-selection.how-many.1               // c2::

Parameter-selection = Record                       // Presenting a choice among alternatives.
   1 how-many         Parameter-selection.how-many optional // Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.
   2 choice           String [0..*]
