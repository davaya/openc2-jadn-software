       title: "OSCAL Metadata"
     package: "https://example.gov/ns/oscal/0.0.1/metadata/"
     exports: ["Metadata", "Responsible-role", "Role-id", "Back-matter", "NonNegativeIntegerDatatype"]
      config: {"$MaxString": 1000, "$TypeName": "^[$A-Z][-.$A-Za-z0-9]{0,96}$", "$FieldName": "^[$a-z][-_$A-Za-z0-9]{0,63}$", "$NSID": "^([A-Za-z][-A-Za-z0-9]{0,31})?$"}

Metadata = Record                                  // Provides information about the containing document, and defines concepts that are shared across the document.
   1 title            String                       // A name given to the document, which may be used by a tool for display and navigation.
   2 published        Published optional
   3 last-modified    Last-modified
   4 version          Version
   5 oscal-version    Oscal-version
   6 revisions        Metadata.revisions-list [0..*]
   7 document-ids     Document-id [0..*]
   8 props            Property [0..*]
   9 links            Link [0..*]
  10 roles            Metadata.roles-list [0..*]
  11 locations        Metadata.locations-list [0..*]
  12 parties          Metadata.parties-list [0..*]
  13 responsible-parties Responsible-party [0..*]
  14 actions          Action [0..*]
  15 remarks          Remarks optional

Metadata.parties-list = ArrayOf(Metadata.parties){1..*}

Metadata.parties = Record                          // An organization or person, which may be associated with roles or other concepts within the current or linked OSCAL document.
   1 uuid             UUIDDatatype                 // A unique identifier for the party.
   2 type             Metadata.parties.type        // A category describing the kind of party the object describes.
   3 name             StringDatatype optional      // The full name of the party. This is typically the legal name associated with the party.
   4 short-name       StringDatatype optional      // A short common name, abbreviation, or acronym for the party.
   5 external-ids     Metadata.parties.external-ids-list [0..*]
   6 props            Property [0..*]
   7 links            Link [0..*]
   8 email-addresses  Email-address [0..*]
   9 telephone-numbers Telephone-number [0..*]
  10 addresses        Address [0..*]
  11 location-uuids   Location-uuid [0..*]
  12 member-of-organizations UUIDDatatype [0..*]
  13 remarks          Remarks optional

Metadata.parties.external-ids-list = ArrayOf(Metadata.parties.external-ids){1..*}

Metadata.parties.external-ids = Record             // An identifier for a person or organization using a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID).
   1 scheme           Metadata.parties.external-ids.scheme // Indicates the type of external identifier.
   2 id               StringDatatype

Metadata.parties.external-ids.scheme = Choice(anyOf) // Indicates the type of external identifier.
   1  URIDatatype                                  // c1::
   2  Metadata.parties.external-ids.scheme.1       // c2::

Metadata.parties.external-ids.scheme.1 = Enumerated
   1 http://orcid.org/

Metadata.parties.type = Choice(allOf)              // A category describing the kind of party the object describes.
   1  StringDatatype                               // c1::
   2  Metadata.parties.type.1                      // c2::

Metadata.parties.type.1 = Enumerated
   1 person
   2 organization

Metadata.revisions-list = ArrayOf(Metadata.revisions){1..*}

Metadata.revisions = Record                        // An entry in a sequential list of revisions to the containing document, expected to be in reverse chronological order (i.e. latest first).
   1 title            String optional              // A name given to the document revision, which may be used by a tool for display and navigation.
   2 published        Published optional
   3 last-modified    Last-modified optional
   4 version          Version
   5 oscal-version    Oscal-version optional
   6 props            Property [0..*]
   7 links            Link [0..*]
   8 remarks          Remarks optional

Published = Choice(allOf)                          // The date and time the document was last made available.
   1  DateTimeWithTimezoneDatatype                 // alias::

Metadata.locations-list = ArrayOf(Metadata.locations){1..*}

Metadata.locations = Record                        // A physical point of presence, which may be associated with people, organizations, or other concepts within the current or linked OSCAL document.
   1 uuid             UUIDDatatype                 // A unique ID for the location, for reference.
   2 title            String optional              // A name given to the location, which may be used by a tool for display and navigation.
   3 address          Address optional
   4 email-addresses  Email-address [0..*]
   5 telephone-numbers Telephone-number [0..*]
   6 urls             URIDatatype [0..*]
   7 props            Property [0..*]
   8 links            Link [0..*]
   9 remarks          Remarks optional

Metadata.roles-list = ArrayOf(Metadata.roles){1..*}

Metadata.roles = Record                            // Defines a function, which might be assigned to a party in a specific situation.
   1 id               TokenDatatype                // A unique identifier for the role.
   2 title            String                       // A name given to the role, which may be used by a tool for display and navigation.
   3 short-name       StringDatatype optional      // A short common name, abbreviation, or acronym for the role.
   4 description      String optional              // A summary of the role's purpose and associated responsibilities.
   5 props            Property [0..*]
   6 links            Link [0..*]
   7 remarks          Remarks optional

Version = Choice(allOf)                            // Used to distinguish a specific revision of an OSCAL document from other previous and future versions.
   1  StringDatatype                               // alias::

Oscal-version = Choice(allOf)                      // The OSCAL model version the document was authored against and will conform to as valid.
   1  StringDatatype                               // alias::

Last-modified = Choice(allOf)                      // The date and time the document was last stored for later retrieval.
   1  DateTimeWithTimezoneDatatype                 // alias::

NonNegativeIntegerDatatype = Choice(allOf)         // An integer value that is equal to or greater than 0.
   1  IntegerDatatype                              // c1::
   2  Number                                       // c2::

Action = Record                                    // An action applied by a role within a given party to the content.
   1 uuid             UUIDDatatype                 // A unique identifier that can be used to reference this defined action elsewhere in an OSCAL document. A UUID should be consistently used for a given location across revisions of the document.
   2 date             DateTimeWithTimezoneDatatype optional // The date and time when the action occurred.
   3 type             TokenDatatype                // The type of action documented by the assembly, such as an approval.
   4 system           URIDatatype                  // Specifies the action type system used.
   5 props            Property [0..*]
   6 links            Link [0..*]
   7 responsible-parties Responsible-party [0..*]
   8 remarks          Remarks optional

Address = Record                                   // A postal address for the location.
   1 type             Address.type optional        // Indicates the type of address.
   2 addr-lines       Addr-line [0..*]
   3 city             StringDatatype optional      // City, town or geographical region for the mailing address.
   4 state            StringDatatype optional      // State, province or analogous geographical region for a mailing address.
   5 postal-code      StringDatatype optional      // Postal or ZIP code for mailing address.
   6 country          StringDatatype optional      // The ISO 3166-1 alpha-2 country code for the mailing address.

Addr-line = Choice(allOf)                          // A single line of an address.
   1  StringDatatype                               // alias::

Address.type = Choice(anyOf)                       // Indicates the type of address.
   1  TokenDatatype                                // c1::
   2  Address.type.1                               // c2::

Address.type.1 = Enumerated
   1 home
   2 work

Back-matter = Record                               // A collection of resources that may be referenced from within the OSCAL document instance.
   1 resources        Back-matter.resources-list [0..*]

Back-matter.resources-list = ArrayOf(Back-matter.resources){1..*}

Back-matter.resources = Record                     // A resource associated with content in the containing document instance. A resource may be directly included in the document using base64 encoding or may point to one or more equivalent internet resources.
   1 uuid             UUIDDatatype                 // A unique identifier for a resource.
   2 title            String optional              // An optional name given to the resource, which may be used by a tool for display and navigation.
   3 description      String optional              // An optional short summary of the resource used to indicate the purpose of the resource.
   4 props            Property [0..*]
   5 document-ids     Document-id [0..*]
   6 citation         Back-matter.resources.citation optional // An optional citation consisting of end note text using structured markup.
   7 rlinks           Back-matter.resources.rlinks-list [0..*]
   8 base64           Back-matter.resources.base64 optional // A resource encoded using the Base64 alphabet defined by RFC 2045.
   9 remarks          Remarks optional

Back-matter.resources.base64 = Record              // A resource encoded using the Base64 alphabet defined by RFC 2045.
   1 filename         TokenDatatype optional       // Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.
   2 media-type       StringDatatype optional      // A label that indicates the nature of a resource, as a data serialization or format.
   3 value            Base64Datatype

Back-matter.resources.citation = Record            // An optional citation consisting of end note text using structured markup.
   1 text             String                       // A line of citation text.
   2 props            Property [0..*]
   3 links            Link [0..*]

Back-matter.resources.rlinks-list = ArrayOf(Back-matter.resources.rlinks){1..*}

Back-matter.resources.rlinks = Record              // A URL-based pointer to an external resource with an optional hash for verification and change detection.
   1 href             URIReferenceDatatype         // A resolvable URL pointing to the referenced resource.
   2 media-type       StringDatatype optional      // A label that indicates the nature of a resource, as a data serialization or format.
   3 hashes           Hash [0..*]

Document-id = Record                               // A document identifier qualified by an identifier scheme.
   1 scheme           Document-id.scheme optional  // Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.
   2 identifier       StringDatatype

Document-id.scheme = Choice(anyOf)                 // Qualifies the kind of document identifier using a URI. If the scheme is not provided the value of the element will be interpreted as a string of characters.
   1  URIDatatype                                  // c1::
   2  Document-id.scheme.1                         // c2::

Document-id.scheme.1 = Enumerated
   1 http://www.doi.org/

Email-address = Choice(allOf)                      // An email address as defined by RFC 5322 Section 3.4.1.
   1  EmailAddressDatatype                         // alias::

EmailAddressDatatype = Choice(allOf)               // An email address string formatted according to RFC 6531.
   1  StringDatatype                               // c1::
   2  EmailAddressDatatype.1                       // c2::

Hash = Record                                      // A representation of a cryptographic digest generated over a resource using a specified hash algorithm.
   1 algorithm        Hash.algorithm               // The digest method by which a hash is derived.
   2 value            StringDatatype

Hash.algorithm = Choice(anyOf)                     // The digest method by which a hash is derived.
   1  StringDatatype                               // c1::
   2  Hash.algorithm.1                             // c2::

Hash.algorithm.1 = Enumerated
   1 SHA-224
   2 SHA-256
   3 SHA-384
   4 SHA-512
   5 SHA3-224
   6 SHA3-256
   7 SHA3-384
   8 SHA3-512

Link = Record                                      // A reference to a local or remote resource, that has a specific relation to the containing object.
   1 href             URIReferenceDatatype         // A resolvable URL reference to a resource.
   2 rel              Link.rel optional            // Describes the type of relationship provided by the link's hypertext reference. This can be an indicator of the link's purpose.
   3 media-type       StringDatatype optional      // A label that indicates the nature of a resource, as a data serialization or format.
   4 resource-fragment StringDatatype optional     // In case where the href points to a back-matter/resource, this value will indicate the URI fragment to append to any rlink associated with the resource. This value MUST be URI encoded.
   5 text             String optional              // A textual label to associate with the link, which may be used for presentation in a tool.

Link.rel = Choice(anyOf)                           // Describes the type of relationship provided by the link's hypertext reference. This can be an indicator of the link's purpose.
   1  TokenDatatype                                // c1::
   2  Link.rel.1                                   // c2::

Link.rel.1 = Enumerated
   1 reference

Location-uuid = Choice(allOf)                      // Reference to a location by UUID.
   1  UUIDDatatype                                 // alias::

Part = Record                                      // An annotated, markup-based textual element of a control's or catalog group's definition, or a child of another part.
   1 id               TokenDatatype optional       // A unique identifier for the part.
   2 name             TokenDatatype                // A textual label that uniquely identifies the part's semantic type, which exists in a value space qualified by the ns.
   3 ns               URIDatatype optional         // An optional namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.
   4 class            TokenDatatype optional       // An optional textual providing a sub-type or characterization of the part's name, or a category to which the part belongs.
   5 title            String optional              // An optional name given to the part, which may be used by a tool for display and navigation.
   6 props            Property [0..*]
   7 prose            String optional              // Permits multiple paragraphs, lists, tables etc.
   8 parts            Part [0..*]
   9 links            Link [0..*]

Property = Record                                  // An attribute, characteristic, or quality of the containing object expressed as a namespace qualified name/value pair.
   1 name             TokenDatatype                // A textual label, within a namespace, that uniquely identifies a specific attribute, characteristic, or quality of the property's containing object.
   2 uuid             UUIDDatatype optional        // A unique identifier for a property.
   3 ns               URIDatatype optional         // A namespace qualifying the property's name. This allows different organizations to associate distinct semantics with the same name.
   4 value            StringDatatype               // Indicates the value of the attribute, characteristic, or quality.
   5 class            TokenDatatype optional       // A textual label that provides a sub-type or characterization of the property's name.
   6 group            TokenDatatype optional       // An identifier for relating distinct sets of properties.
   7 remarks          Remarks optional

Responsible-party = Record                         // A reference to a set of persons and/or organizations that have responsibility for performing the referenced role in the context of the containing object.
   1 role-id          TokenDatatype                // A reference to a role performed by a party.
   2 party-uuids      Party-uuid [1..*]
   3 props            Property [0..*]
   4 links            Link [0..*]
   5 remarks          Remarks optional

Party-uuid = Choice(allOf)                         // Reference to a party by UUID.
   1  UUIDDatatype                                 // alias::

Responsible-role = Record                          // A reference to a role with responsibility for performing a function relative to the containing object, optionally associated with a set of persons and/or organizations that perform that role.
   1 role-id          TokenDatatype                // A human-oriented identifier reference to a role performed.
   2 props            Property [0..*]
   3 links            Link [0..*]
   4 party-uuids      Party-uuid [0..*]
   5 remarks          Remarks optional

Telephone-number = Record                          // A telephone service number as defined by ITU-T E.164.
   1 type             Telephone-number.type optional // Indicates the type of phone number.
   2 number           StringDatatype

Telephone-number.type = Choice(anyOf)              // Indicates the type of phone number.
   1  StringDatatype                               // c1::
   2  Telephone-number.type.1                      // c2::

Telephone-number.type.1 = Enumerated
   1 home
   2 office
   3 mobile

Remarks = String                                   // Additional commentary about the containing object.

Role-id = Choice(allOf)                            // Reference to a role by UUID.
   1  TokenDatatype                                // alias::
